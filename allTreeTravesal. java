import java.util.LinkedList;
import java.util.Queue;

public class AllTreeTraversals {

    // Binary Tree Node
    static class Node {
        int data;
        Node left, right;

        Node(int value) {
            data = value;
            left = right = null;
        }
    }

    // 1. Inorder Traversal
    public static void inorder(Node root) {
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
    }

    // 2. Preorder Traversal
    public static void preorder(Node root) {
        if (root == null) return;
        System.out.print(root.data + " ");
        preorder(root.left);
        preorder(root.right);
    }

    // 3. Postorder Traversal
    public static void postorder(Node root) {
        if (root == null) return;
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data + " ");
    }

    // 4. Level Order Traversal (Breadth First Search)
    public static void levelOrder(Node root) {
        if (root == null) return;
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            Node current = queue.poll();
            System.out.print(current.data + " ");
            if (current.left != null) queue.offer(current.left);
            if (current.right != null) queue.offer(current.right);
        }
    }

    public static void main(String[] args) {
        // Build the tree:
        /*
                  1
                 / \
                2   3
               / \
              4   5
        */
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);

        System.out.println("Inorder Traversal: ");
        inorder(root);  // Output: 4 2 5 1 3

        System.out.println("\n\nPreorder Traversal: ");
        preorder(root); // Output: 1 2 4 5 3

        System.out.println("\n\nPostorder Traversal: ");
        postorder(root); // Output: 4 5 2 3 1

        System.out.println("\n\nLevel Order Traversal: ");
        levelOrder(root); // Output: 1 2 3 4 5
    }
}